/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/rkucbel1/DroneCAN/DSDL/uavcan/equipment/gnss/ECEFPositionVelocity.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY
#define __UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Nested type.
# GNSS ECEF high resolution position and velocity.
#
# ECEF is an acronym for Earth-Centered-Earth-Fixed, which is a cartesian
# coordinate system which rotates with the earth. The origin (0,0,0) is
# located at the center of the earth. The x-axis is a vector pointing from
# the origin with positive direction towards 0 degrees latitude and
# longitude (equator, at the prime meridian). The z-axis is a vector
# pointing from the origin towards the north-pole. The y-axis completes a
# right-handed coordinate system.
#

float32[3] velocity_xyz            # XYZ velocity in m/s

int36[3] position_xyz_mm           # XYZ-axis coordinates in mm

void6                              # Aligns the following array at byte boundary

float16[<=36] covariance           # Position and velocity covariance in the ECEF frame. Units are m^2 for position,
                                   # (m/s)^2 for velocity, and m^2/s for position/velocity.
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.gnss.ECEFPositionVelocity
saturated float32[3] velocity_xyz
saturated int36[3] position_xyz_mm
void6
saturated float16[<=36] covariance
******************************************************************************/

#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_NAME    "uavcan.equipment.gnss.ECEFPositionVelocity"
#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_SIGNATURE (0x24A5DA4ABEE3A248ULL)

#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_MAX_SIZE ((792 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_VELOCITY_XYZ_LENGTH                   3
#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_POSITION_XYZ_MM_LENGTH                3
#define UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY_COVARIANCE_MAX_LENGTH                 36

typedef struct
{
    // FieldTypes
    float      velocity_xyz[3];               // Static Array 32bit[3] max items
    int64_t    position_xyz_mm[3];            // Static Array 36bit[3] max items
    // void6
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[36] max items
    } covariance;

} uavcan_equipment_gnss_ECEFPositionVelocity;

static inline
uint32_t uavcan_equipment_gnss_ECEFPositionVelocity_encode(uavcan_equipment_gnss_ECEFPositionVelocity* source, void* msg_buf, bool tao_enabled);

static inline
int32_t uavcan_equipment_gnss_ECEFPositionVelocity_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_ECEFPositionVelocity* dest, uint8_t** dyn_arr_buf, bool tao_enabled);

static inline
uint32_t uavcan_equipment_gnss_ECEFPositionVelocity_encode_internal(uavcan_equipment_gnss_ECEFPositionVelocity* source, void* msg_buf, uint32_t offset, uint8_t root_item, bool tao_enabled);

static inline
int32_t uavcan_equipment_gnss_ECEFPositionVelocity_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_ECEFPositionVelocity* dest, uint8_t** dyn_arr_buf, int32_t offset, bool tao_enabled);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/rkucbel1/DroneCAN/DSDL/uavcan/equipment/gnss/ECEFPositionVelocity.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) >= max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_gnss_ECEFPositionVelocity_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_gnss_ECEFPositionVelocity_encode_internal(uavcan_equipment_gnss_ECEFPositionVelocity* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item),
  bool tao_enabled)
{
    uint32_t c = 0;

    // Static array (velocity_xyz)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->velocity_xyz + c)); // 2147483647
        offset += 32;
    }

    // Static array (position_xyz_mm)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 36, (void*)(source->position_xyz_mm + c)); // 34359738367
        offset += 36;
    }

    // Void6
    offset += 6;

    // Dynamic Array (covariance)
    if (! root_item || ! tao_enabled)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 6, (void*)&source->covariance.len);
        offset += 6;
    }

    // - Add array items
    for (c = 0; c < source->covariance.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           16,
                           (void*)(source->covariance.data + c));// 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_gnss_ECEFPositionVelocity_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_gnss_ECEFPositionVelocity_encode(uavcan_equipment_gnss_ECEFPositionVelocity* source, void* msg_buf, bool tao_enabled)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_gnss_ECEFPositionVelocity_encode_internal(source, msg_buf, offset, 1, tao_enabled);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_gnss_ECEFPositionVelocity_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_ECEFPositionVelocity dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_ECEFPositionVelocity_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_gnss_ECEFPositionVelocity* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  bool tao_enabled)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Static array (velocity_xyz)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, 32, false, (void*)(dest->velocity_xyz + c));
        if (ret != 32)
        {
            goto uavcan_equipment_gnss_ECEFPositionVelocity_error_exit;
        }
        offset += 32;
    }

    // Static array (position_xyz_mm)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, 36, true, (void*)(dest->position_xyz_mm + c));
        if (ret != 36)
        {
            goto uavcan_equipment_gnss_ECEFPositionVelocity_error_exit;
        }
        offset += 36;
    }

    // Void6
    offset += 6;

    // Dynamic Array (covariance)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len && tao_enabled)
    {
        //  - Calculate Array length from MSG length
        dest->covariance.len = ((payload_len * 8) - offset ) / 16; // 16 bit array item size
    }
    else
    {
        // - Array length 6 bits
        ret = canardDecodeScalar(transfer,
                                 (uint32_t)offset,
                                 6,
                                 false,
                                 (void*)&dest->covariance.len); // 32767
        if (ret != 6)
        {
            goto uavcan_equipment_gnss_ECEFPositionVelocity_error_exit;
        }
        offset += 6;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     (uint32_t)offset,
                                     16,
                                     false,
                                     (void*)*dyn_arr_buf); // 32767
            if (ret != 16)
            {
                goto uavcan_equipment_gnss_ECEFPositionVelocity_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((float*)*dyn_arr_buf) + 1);
        }
        offset += 16;
    }
    return offset;

uavcan_equipment_gnss_ECEFPositionVelocity_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_gnss_ECEFPositionVelocity_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_ECEFPositionVelocity dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_ECEFPositionVelocity_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_gnss_ECEFPositionVelocity* dest,
  uint8_t** dyn_arr_buf,
  bool tao_enabled)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_gnss_ECEFPositionVelocity); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_gnss_ECEFPositionVelocity_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao_enabled);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_GNSS_ECEFPOSITIONVELOCITY