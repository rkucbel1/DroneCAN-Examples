/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/rkucbel1/DroneCAN/DSDL/uavcan/equipment/gnss/1063.Fix2.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_GNSS_FIX2
#define __UAVCAN_EQUIPMENT_GNSS_FIX2

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan/Timestamp.h>
#include <uavcan/equipment/gnss/ECEFPositionVelocity.h>

/******************************* Source text **********************************
#
# GNSS ECEF and LLA navigation solution with uncertainty.
#

#
# Global network-synchronized time, if available, otherwise zero.
#
uavcan.Timestamp timestamp

#
# Time solution.
# The method and number of leap seconds which were in use for deriving the timestamp are
# defined in the fields below.
#
uavcan.Timestamp gnss_timestamp

#
# Method used for deriving the GNSS timestamp field.
# This data type relies on the following definitions:
#
#   Leap seconds  - Accumulated one-second adjustments applied to UTC since 1972.
#                   For reference, on May 2017, the number of leap seconds was equal 27.
#                   The number of leap seconds is taken from the field num_leap_seconds.
#                   Refer to https://en.wikipedia.org/wiki/Leap_second for a general overview.
#
#   TAI timestamp - The number of microseconds between the current TAI time and
#                   the TAI time at UTC 1970-01-01T00:00:00.
#
#   UTC timestamp - The number of microseconds between the current UTC time and
#                   UTC 1970-01-01T00:00:00.
#                   UTC can be expressed via TAI as follows (in seconds):
#                       UTC = TAI - num_leap_seconds - 10
#                   And via GPS (in seconds):
#                       UTC = GPS - num_leap_seconds + 9
#
#   GPS timestamp - The number of microseconds between the current GPS time and
#                   the GPS time at UTC 1970-01-01T00:00:00.
#                   GPS time can be expressed via TAI as follows (in seconds):
#                       GPS = TAI - 19
#
uint3 GNSS_TIME_STANDARD_NONE = 0  # Time is unknown
uint3 GNSS_TIME_STANDARD_TAI  = 1
uint3 GNSS_TIME_STANDARD_UTC  = 2
uint3 GNSS_TIME_STANDARD_GPS  = 3
uint3 gnss_time_standard

void13   # Reserved space

#
# Accumulated one-second adjustments applied to UTC since 1972.
# The number must agree with the currently correct number of UTC leap seconds. If this cannot
# be garanteed, the field must be set to NUM_LEAP_SECONDS_UNKNOWN.
#
uint8 NUM_LEAP_SECONDS_UNKNOWN = 0
uint8 num_leap_seconds

#
# Position and velocity solution
#
int37 longitude_deg_1e8            # Longitude degrees multiplied by 1e8 (approx. 1 mm per LSB)
int37 latitude_deg_1e8             # Latitude degrees multiplied by 1e8 (approx. 1 mm per LSB on equator)
int27 height_ellipsoid_mm          # Height above ellipsoid in millimeters
int27 height_msl_mm                # Height above mean sea level in millimeters

float32[3] ned_velocity            # NED frame (north-east-down) in meters per second

#
# Fix status
#
uint6 sats_used

uint2 STATUS_NO_FIX    = 0
uint2 STATUS_TIME_ONLY = 1
uint2 STATUS_2D_FIX    = 2
uint2 STATUS_3D_FIX    = 3
uint2 status

#
# GNSS Mode
#
uint4 MODE_SINGLE      = 0
uint4 MODE_DGPS        = 1
uint4 MODE_RTK         = 2
uint4 MODE_PPP         = 3
uint4 mode

#
# GNSS Sub mode
#
uint6 SUB_MODE_DGPS_OTHER    = 0
uint6 SUB_MODE_DGPS_SBAS     = 1

uint6 SUB_MODE_RTK_FLOAT     = 0
uint6 SUB_MODE_RTK_FIXED     = 1

uint6 sub_mode

#
# Precision
#
float16[<=36] covariance    # Position and velocity covariance. Units are
                            # m^2 for position, (m/s)^2 for velocity and
                            # m^2/s for position/velocity.

float16 pdop

#
# Position and velocity solution in ECEF, if available
#
ECEFPositionVelocity[<=1] ecef_position_velocity
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.gnss.Fix2
uavcan.Timestamp timestamp
uavcan.Timestamp gnss_timestamp
saturated uint3 gnss_time_standard
void13
saturated uint8 num_leap_seconds
saturated int37 longitude_deg_1e8
saturated int37 latitude_deg_1e8
saturated int27 height_ellipsoid_mm
saturated int27 height_msl_mm
saturated float32[3] ned_velocity
saturated uint6 sats_used
saturated uint2 status
saturated uint4 mode
saturated uint6 sub_mode
saturated float16[<=36] covariance
saturated float16 pdop
uavcan.equipment.gnss.ECEFPositionVelocity[<=1] ecef_position_velocity
******************************************************************************/

#define UAVCAN_EQUIPMENT_GNSS_FIX2_ID                      1063
#define UAVCAN_EQUIPMENT_GNSS_FIX2_NAME                    "uavcan.equipment.gnss.Fix2"
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SIGNATURE               (0xCA41E7000F37435FULL)

#define UAVCAN_EQUIPMENT_GNSS_FIX2_MAX_SIZE                ((1769 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_NONE                    0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_TAI                     1 // 1
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_UTC                     2 // 2
#define UAVCAN_EQUIPMENT_GNSS_FIX2_GNSS_TIME_STANDARD_GPS                     3 // 3
#define UAVCAN_EQUIPMENT_GNSS_FIX2_NUM_LEAP_SECONDS_UNKNOWN                   0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_STATUS_NO_FIX                              0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_STATUS_TIME_ONLY                           1 // 1
#define UAVCAN_EQUIPMENT_GNSS_FIX2_STATUS_2D_FIX                              2 // 2
#define UAVCAN_EQUIPMENT_GNSS_FIX2_STATUS_3D_FIX                              3 // 3
#define UAVCAN_EQUIPMENT_GNSS_FIX2_MODE_SINGLE                                0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_MODE_DGPS                                  1 // 1
#define UAVCAN_EQUIPMENT_GNSS_FIX2_MODE_RTK                                   2 // 2
#define UAVCAN_EQUIPMENT_GNSS_FIX2_MODE_PPP                                   3 // 3
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SUB_MODE_DGPS_OTHER                        0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SUB_MODE_DGPS_SBAS                         1 // 1
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SUB_MODE_RTK_FLOAT                         0 // 0
#define UAVCAN_EQUIPMENT_GNSS_FIX2_SUB_MODE_RTK_FIXED                         1 // 1

#define UAVCAN_EQUIPMENT_GNSS_FIX2_NED_VELOCITY_LENGTH                                   3
#define UAVCAN_EQUIPMENT_GNSS_FIX2_COVARIANCE_MAX_LENGTH                                 36
#define UAVCAN_EQUIPMENT_GNSS_FIX2_ECEF_POSITION_VELOCITY_MAX_LENGTH                     1

typedef struct
{
    // FieldTypes
    uavcan_Timestamp timestamp;                     //
    uavcan_Timestamp gnss_timestamp;                //
    uint8_t    gnss_time_standard;            // bit len 3
    // void13
    uint8_t    num_leap_seconds;              // bit len 8
    int64_t    longitude_deg_1e8;             // bit len 37
    int64_t    latitude_deg_1e8;              // bit len 37
    int32_t    height_ellipsoid_mm;           // bit len 27
    int32_t    height_msl_mm;                 // bit len 27
    float      ned_velocity[3];               // Static Array 32bit[3] max items
    uint8_t    sats_used;                     // bit len 6
    uint8_t    status;                        // bit len 2
    uint8_t    mode;                          // bit len 4
    uint8_t    sub_mode;                      // bit len 6
    struct
    {
        uint8_t    len;                       // Dynamic array length
        float*     data;                      // Dynamic Array 16bit[36] max items
    } covariance;
    float      pdop;                          // float16 Saturate
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uavcan_equipment_gnss_ECEFPositionVelocity* data;                      // Dynamic Array 792bit[1] max items
    } ecef_position_velocity;

} uavcan_equipment_gnss_Fix2;

static inline
uint32_t uavcan_equipment_gnss_Fix2_encode(uavcan_equipment_gnss_Fix2* source, void* msg_buf, bool tao_enabled);

static inline
int32_t uavcan_equipment_gnss_Fix2_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Fix2* dest, uint8_t** dyn_arr_buf, bool tao_enabled);

static inline
uint32_t uavcan_equipment_gnss_Fix2_encode_internal(uavcan_equipment_gnss_Fix2* source, void* msg_buf, uint32_t offset, uint8_t root_item, bool tao_enabled);

static inline
int32_t uavcan_equipment_gnss_Fix2_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_gnss_Fix2* dest, uint8_t** dyn_arr_buf, int32_t offset, bool tao_enabled);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/rkucbel1/DroneCAN/DSDL/uavcan/equipment/gnss/1063.Fix2.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) >= max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_gnss_Fix2_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_gnss_Fix2_encode_internal(uavcan_equipment_gnss_Fix2* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item),
  bool tao_enabled)
{
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->timestamp, msg_buf, offset, 0, tao_enabled);

    // Compound
    offset = uavcan_Timestamp_encode_internal(&source->gnss_timestamp, msg_buf, offset, 0, tao_enabled);
    source->gnss_time_standard = CANARD_INTERNAL_SATURATE_UNSIGNED(source->gnss_time_standard, 7)
    canardEncodeScalar(msg_buf, offset, 3, (void*)&source->gnss_time_standard); // 7
    offset += 3;

    // Void13
    offset += 13;
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->num_leap_seconds); // 255
    offset += 8;

    source->longitude_deg_1e8 = CANARD_INTERNAL_SATURATE(source->longitude_deg_1e8, 68719476735)
    canardEncodeScalar(msg_buf, offset, 37, (void*)&source->longitude_deg_1e8); // 68719476735
    offset += 37;

    source->latitude_deg_1e8 = CANARD_INTERNAL_SATURATE(source->latitude_deg_1e8, 68719476735)
    canardEncodeScalar(msg_buf, offset, 37, (void*)&source->latitude_deg_1e8); // 68719476735
    offset += 37;

    source->height_ellipsoid_mm = CANARD_INTERNAL_SATURATE(source->height_ellipsoid_mm, 67108863)
    canardEncodeScalar(msg_buf, offset, 27, (void*)&source->height_ellipsoid_mm); // 67108863
    offset += 27;

    source->height_msl_mm = CANARD_INTERNAL_SATURATE(source->height_msl_mm, 67108863)
    canardEncodeScalar(msg_buf, offset, 27, (void*)&source->height_msl_mm); // 67108863
    offset += 27;

    // Static array (ned_velocity)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 32, (void*)(source->ned_velocity + c)); // 2147483647
        offset += 32;
    }

    source->sats_used = CANARD_INTERNAL_SATURATE_UNSIGNED(source->sats_used, 63)
    canardEncodeScalar(msg_buf, offset, 6, (void*)&source->sats_used); // 63
    offset += 6;

    source->status = CANARD_INTERNAL_SATURATE_UNSIGNED(source->status, 3)
    canardEncodeScalar(msg_buf, offset, 2, (void*)&source->status); // 3
    offset += 2;

    source->mode = CANARD_INTERNAL_SATURATE_UNSIGNED(source->mode, 15)
    canardEncodeScalar(msg_buf, offset, 4, (void*)&source->mode); // 15
    offset += 4;

    source->sub_mode = CANARD_INTERNAL_SATURATE_UNSIGNED(source->sub_mode, 63)
    canardEncodeScalar(msg_buf, offset, 6, (void*)&source->sub_mode); // 63
    offset += 6;

    // Dynamic Array (covariance)
    // - Add array length
    canardEncodeScalar(msg_buf, offset, 6, (void*)&source->covariance.len);
    offset += 6;

    // - Add array items
    for (c = 0; c < source->covariance.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           16,
                           (void*)(source->covariance.data + c));// 32767
        offset += 16;
    }

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->pdop);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->pdop;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;

    // Dynamic Array (ecef_position_velocity)
    if (! root_item || ! tao_enabled)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 1, (void*)&source->ecef_position_velocity.len);
        offset += 1;
    }

    // - Add array items
    for (c = 0; c < source->ecef_position_velocity.len; c++)
    {
        offset += uavcan_equipment_gnss_ECEFPositionVelocity_encode_internal(&source->ecef_position_velocity.data[c], msg_buf, offset, 0, tao_enabled);
    }

    return offset;
}

/**
  * @brief uavcan_equipment_gnss_Fix2_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_gnss_Fix2_encode(uavcan_equipment_gnss_Fix2* source, void* msg_buf, bool tao_enabled)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_gnss_Fix2_encode_internal(source, msg_buf, offset, 1, tao_enabled);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_gnss_Fix2_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Fix2 dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Fix2_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_gnss_Fix2* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset,
  bool tao_enabled)
{
    int32_t ret = 0;
    uint32_t c = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, payload_len, &dest->timestamp, dyn_arr_buf, offset, tao_enabled);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }

    // Compound
    offset = uavcan_Timestamp_decode_internal(transfer, payload_len, &dest->gnss_timestamp, dyn_arr_buf, offset, tao_enabled);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 3, false, (void*)&dest->gnss_time_standard);
    if (ret != 3)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 3;

    // Void13
    offset += 13;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 8, false, (void*)&dest->num_leap_seconds);
    if (ret != 8)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 8;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 37, true, (void*)&dest->longitude_deg_1e8);
    if (ret != 37)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 37;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 37, true, (void*)&dest->latitude_deg_1e8);
    if (ret != 37)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 37;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 27, true, (void*)&dest->height_ellipsoid_mm);
    if (ret != 27)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 27;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 27, true, (void*)&dest->height_msl_mm);
    if (ret != 27)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 27;

    // Static array (ned_velocity)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, (uint32_t)offset, 32, false, (void*)(dest->ned_velocity + c));
        if (ret != 32)
        {
            goto uavcan_equipment_gnss_Fix2_error_exit;
        }
        offset += 32;
    }

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 6, false, (void*)&dest->sats_used);
    if (ret != 6)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 6;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 2, false, (void*)&dest->status);
    if (ret != 2)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 2;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 4, false, (void*)&dest->mode);
    if (ret != 4)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 4;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 6, false, (void*)&dest->sub_mode);
    if (ret != 6)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 6;

    // Dynamic Array (covariance)
    //  - Array length, not last item 6 bits
    ret = canardDecodeScalar(transfer,
                             (uint32_t)offset,
                             6,
                             false,
                             (void*)&dest->covariance.len); // 32767
    if (ret != 6)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
    offset += 6;

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->covariance.data = (float*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->covariance.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     (uint32_t)offset,
                                     16,
                                     false,
                                     (void*)*dyn_arr_buf); // 32767
            if (ret != 16)
            {
                goto uavcan_equipment_gnss_Fix2_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((float*)*dyn_arr_buf) + 1);
        }
        offset += 16;
    }

    // float16 special handling
    ret = canardDecodeScalar(transfer, (uint32_t)offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto uavcan_equipment_gnss_Fix2_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->pdop = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->pdop = (float)tmp_float;
#endif
    offset += 16;

    // Dynamic Array (ecef_position_velocity)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len && tao_enabled)
    {
        //  - Calculate Array length from MSG length
        dest->ecef_position_velocity.len = ((payload_len * 8) - offset ) / 792; // 792 bit array item size
    }
    else
    {
        // - Array length 1 bits
        ret = canardDecodeScalar(transfer,
                                 (uint32_t)offset,
                                 1,
                                 false,
                                 (void*)&dest->ecef_position_velocity.len); // 0
        if (ret != 1)
        {
            goto uavcan_equipment_gnss_Fix2_error_exit;
        }
        offset += 1;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->ecef_position_velocity.data = (uavcan_equipment_gnss_ECEFPositionVelocity*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->ecef_position_velocity.len; c++)
    {
        offset += uavcan_equipment_gnss_ECEFPositionVelocity_decode_internal(transfer,
                                                0,
                                                &dest->ecef_position_velocity.data[c],
                                                dyn_arr_buf,
                                                offset,
                                                tao_enabled);
    }
    return offset;

uavcan_equipment_gnss_Fix2_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_gnss_Fix2_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_gnss_Fix2 dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_gnss_Fix2_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_gnss_Fix2* dest,
  uint8_t** dyn_arr_buf,
  bool tao_enabled)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_gnss_Fix2); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_gnss_Fix2_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset, tao_enabled);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_GNSS_FIX2